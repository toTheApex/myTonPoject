import { AstModuleItem, AstModule, AstNode } from "./ast";
/**
 * An utility class that provides alpha-renaming and topological sort functionality
 * for the AST comparison.
 */
export declare class AstRenamer {
    private sort;
    private currentIdx;
    private renamed;
    private givenNames;
    private constructor();
    static make(params?: Partial<{
        sort: boolean;
    }>): AstRenamer;
    /**
     * Renames the given node based on its AST.
     */
    renameModule(module: AstModule): AstNode;
    private nextIdx;
    /**
     * Generates a new unique node name.
     */
    private generateName;
    /**
     * Tries to get an identifier based on the node definition.
     */
    private getName;
    /**
     * Sets new or an existent name based on node's hash.
     */
    private setName;
    renameModuleItems(items: AstModuleItem[]): AstModuleItem[];
    /**
     * Lexicographically sort items based on their kinds and then by their names.
     */
    private sortModuleItems;
    /**
     * Changes the name of a top-level/contract/trait element without inspecting its body.
     */
    private changeItemName;
    /**
     * Renames the contents of an AstModuleItem based on its kind.
     */
    private renameModuleItemContents;
    /**
     * Sorts attributes within an item if available.
     */
    private sortAttributes;
    /**
     * Renames the contents of a function.
     */
    private renameFunctionContents;
    /**
     * Renames the contents of a constant, focusing on the initializer.
     */
    private renameConstantContents;
    /**
     * Renames the contents of a trait, including its declarations.
     */
    private renameTraitContents;
    /**
     * Renames the contents of a contract, including its declarations and parameters.
     */
    private renameContractContents;
    private renameStatements;
    private renameStatement;
    private renameExpression;
    private renameStructFieldInitializer;
}

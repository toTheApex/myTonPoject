import { AstNode } from "./ast";
export type AstHash = string;
/**
 * Provides functionality to hash AST nodes regardless of identifiers.
 */
export declare class AstHasher {
    private readonly sort;
    private constructor();
    static make(params?: Partial<{
        sort: boolean;
    }>): AstHasher;
    hash(node: AstNode): AstHash;
    /**
     * Generates a string that is used to create a hash.
     */
    private getHashData;
    private hashStructDecl;
    private hashMessageDecl;
    private hashFunctionDef;
    private hashConstantDef;
    private hashTrait;
    private hashContract;
    private hashFields;
    private hashParams;
    private hashTypedParameter;
    private hashAttributes;
    private hashContractAttributes;
    private hashIds;
    private hashDeclarations;
    private hashStatements;
    private hashStructFieldInitializer;
    private hashFieldDecl;
    private hashContractInit;
    private hashNativeFunctionDecl;
    private hashReceiver;
    private hashFunctionDecl;
    private hashImport;
    private hashConstantDecl;
    private hashModule;
    private hashImports;
    private hashModuleItems;
}

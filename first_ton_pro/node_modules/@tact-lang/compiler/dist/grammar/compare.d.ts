import { AstNode } from "./ast";
/**
 * Provides an API to compare two AST nodes with extra options.
 */
export declare class AstComparator {
    private readonly sort;
    private readonly canonicalize;
    /**
     * @param sort Topologically sort AST entries before comparing. Should be enabled
     *        in order to handle duplicate entries shuffled in the source code.
     * @param canonicalize Introduce de Brujin indices for local bindings to handle
     *        duplicate code with different names. Should be enabled in order to
     *        treat duplicate entries with different names as the same elements.
     */
    private constructor();
    static make(options?: Partial<{
        sort: boolean;
        canonicalize: boolean;
    }>): AstComparator;
    compare(node1: AstNode, node2: AstNode): boolean;
    private compareNullableNodes;
    private compareArray;
    private compareNullableArray;
    private compareAttributes;
    private compareReceiverKinds;
}
